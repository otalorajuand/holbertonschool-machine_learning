"""
        deltas = {}
        nl = self.L
        deltas['DZ' + str(nl)] = cache['A' + str(nl)] - Y
        m = cache['A0'].shape[1]
        deltas['DW' + str(nl)] = (1 / m) * \
            np.dot(deltas['DZ' + str(nl)], cache['A' + str(nl - 1)].T)
        deltas['DB' + str(nl)] = (1 / m) * \
            np.sum(deltas['DZ' + str(nl)], axis=1, keepdims=True)

        self.weights['W'+str(nl)] = self.weights['W'+str(nl)] - alpha * deltas['DW'+str(nl)]
        self.weights['b'+str(nl)] = self.weights['b'+str(nl)] - alpha * deltas['DB'+str(nl)]

        for i in reversed(range(1, nl)):

            W = self.weights['W' + str(i + 1)]
            DZ = deltas['DZ' + str(i + 1)]

            A = cache['A' + str(i)]
            A_1 = cache['A' + str(i - 1)]

            #deltas['DZ' + str(i)] = np.dot(W.T, DZ) * (A * (1 - A))
            deltas['DZ' + str(i)] = np.matmul(W.T, DZ) * (A * (1 - A))
            DZ_1 = deltas['DZ' + str(i)]
            deltas['DW' + str(i)] = (1 / m) * np.dot(DZ_1, A_1.T)
            deltas['DB' + str(i)] = (1 / m) * \
                np.sum(deltas['DW' + str(i)], axis=1, keepdims=True)

            W = 'W' + str(i)
            DW = 'DW' + str(i)
            B = 'b' + str(i)
            DB = 'DB' + str(i)
            self.weights[W] = self.weights[W] - alpha * deltas[DW]
            self.weights[B] = self.weights[B] - alpha * deltas[DB]"""
